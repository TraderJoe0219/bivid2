rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ユーザープロフィール
    match /users/{userId} {
      // 自分のプロフィールは読み書き可能
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // 他のユーザーのプロフィールは読み取りのみ（公開情報のみ）
      allow read: if request.auth != null;
      
      // 新規ユーザー作成時の検証
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }

    // スキル
    match /skills/{skillId} {
      // 認証済みユーザーは読み取り可能
      allow read: if request.auth != null;
      
      // スキル作成は認証済みユーザーのみ
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.teacherId
        && validateSkillData(request.resource.data);
      
      // 自分のスキルのみ更新・削除可能
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.teacherId;
    }

    // 予約
    match /bookings/{bookingId} {
      // 教師または生徒のみアクセス可能
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.studentId || 
         request.auth.uid == resource.data.teacherId);
      
      // 予約作成時の検証
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.studentId
        && validateBookingData(request.resource.data);
    }

    // レビュー
    match /reviews/{reviewId} {
      // 公開レビューは誰でも読み取り可能
      allow read: if request.auth != null;
      
      // レビュー作成は認証済みユーザーのみ
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.reviewerId
        && validateReviewData(request.resource.data);
      
      // 自分のレビューのみ更新・削除可能
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.reviewerId;
    }

    // 会話
    match /conversations/{conversationId} {
      // 参加者のみアクセス可能
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // 会話作成時の検証
      allow create: if request.auth != null
        && request.auth.uid in request.resource.data.participants
        && request.resource.data.participants.size() == 2;
      
      // メッセージサブコレクション
      match /messages/{messageId} {
        // 会話参加者のみアクセス可能
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // メッセージ作成時の検証
        allow create: if request.auth != null
          && request.auth.uid == request.resource.data.senderId
          && validateMessageData(request.resource.data);
      }
    }

    // カテゴリ（マスターデータ）
    match /categories/{categoryId} {
      // 読み取りのみ許可
      allow read: if true;
      // 管理者のみ書き込み可能（実装時に管理者判定を追加）
      allow write: if false;
    }

    // 管理者データ
    match /admin/{document=**} {
      // 管理者のみアクセス可能（実装時に管理者判定を追加）
      allow read, write: if false;
    }

    // バリデーション関数
    function validateUserData(data) {
      return data.keys().hasAll(['email', 'displayName', 'createdAt', 'updatedAt'])
        && data.email is string
        && data.displayName is string
        && data.displayName.size() >= 1
        && data.displayName.size() <= 50;
    }

    function validateSkillData(data) {
      return data.keys().hasAll(['title', 'description', 'category', 'teacherId', 'price', 'isActive'])
        && data.title is string
        && data.title.size() >= 1
        && data.title.size() <= 100
        && data.description is string
        && data.description.size() >= 10
        && data.description.size() <= 2000
        && data.category is string
        && data.price.amount is number
        && data.price.amount >= 0
        && data.isActive is bool;
    }

    function validateBookingData(data) {
      return data.keys().hasAll(['skillId', 'teacherId', 'studentId', 'scheduledAt', 'status'])
        && data.skillId is string
        && data.teacherId is string
        && data.studentId is string
        && data.scheduledAt is timestamp
        && data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'];
    }

    function validateReviewData(data) {
      return data.keys().hasAll(['bookingId', 'skillId', 'reviewerId', 'revieweeId', 'rating', 'comment'])
        && data.rating is number
        && data.rating >= 1
        && data.rating <= 5
        && data.comment is string
        && data.comment.size() >= 1
        && data.comment.size() <= 1000;
    }

    function validateMessageData(data) {
      return data.keys().hasAll(['senderId', 'content', 'type', 'createdAt'])
        && data.senderId is string
        && data.content is string
        && data.content.size() >= 1
        && data.content.size() <= 1000
        && data.type in ['text', 'image', 'file', 'system']
        && data.createdAt is timestamp;
    }

    // 高齢者向け安全性チェック
    function isValidAge(age) {
      return age == null || (age is number && age >= 18 && age <= 120);
    }

    function isValidLocation(location) {
      return location.keys().hasAll(['prefecture', 'city'])
        && location.prefecture is string
        && location.city is string;
    }
  }
}
